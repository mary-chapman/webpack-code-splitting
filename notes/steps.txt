steps for this project:

SECTION 2: A BASIC BUILD
1. make a directory with an npm init
2. create 2 files for modules: index.js and sum.js
  -> SUM.js: create a function 2 add 2 numbers and export it
  -> INDEX.js: import sum.js, add 2 numbers together and print
3. TERM: npm install --save-dev webpack@2.2.0-rc.0
4. create new file: webpack.config.js
  -->WEBPACK.config: set up config object and export
  --> in config objects add 2 pieces of congiguration
    1.  entry property: the entry point of the application, a relative path
    2.  output object:
      --> path: an absolute location, need to import path module and create a build folder
      --> filename: the file where the bundled code will be saved (usually called bundle.js)
5.  PACKAGE.JSON: set up webpack as a script
6.  TERM: npm run build
7. create an index.html with bundle.js as script

SECTION 3: LOADERS
1. install 3 babel modules: babel-loader babel-core babel-preset-env
2. WEBPACK.CONFIG
  --> wire up loaders to webpack, set up a MODULE object
  --> set up a RULES property as an array - will descript each different loader
3. .BABELRC: establishes rules for working with babel
  --set up presets to babel-preset-env
4. test out with npm run build
5. refactor to ES5 import/export in index.js and sum.js
6. CSS
  --> create image_view.js:
    --> create image elemtnt, give a source, append to DOM
    --> import into index.js file
  --> test out with npm run build
    --> style in style.css
      --> create styles folder with image_viewer.css file
      --> put styling into css file
      --> import file into image_viewer.js
      --> install css modules:  style-loader css-loader
      --> wire up loaders in webpack.config
  WAY 2: create seperate CSS file and insert in script tag
    --> term: install extract-text-webpack-plugin@2.0.0-beta.4
      -->a library takes a ref to a loader, runs webpack with it, and takes any text generated by loader and save into a seperate file
    --> WEBPACK.CONFIG: import extract-text-webpack-plugin
      --> set up css loader with plugin
      -->set up another prop at bottom of config - plugins an array
      --> test with npm run build and make sure generates a CSS file
      -->INDEX.html: add a link tag to include style.css file
7. HOSTING IMAGES LOCALLY
  --> term: install image loaders: image-webpack-loader + url-loader
  --> add another rule for image loaders
  --> images to test with: add a new folder called assets
    --> download a big and small image from loarem pixel
    --> import images into image viewer file

SECTION 4: CODE SPLITTING
INDEX.JS: start off with blank section
-> add button with createElement
-> create text with innerText
-> add onclick event handler
-> append the button to the dom
-> inside button event handler we'll import the image viewer file with the sytem.import function
  -> returns a promise, add a .then statement
IMAGE_VIEWER: only include small image details
-> wrap code inside of an export default arrow function
INDEX.JS: call module.default after .then to show image inside the browser when the button is clicked
